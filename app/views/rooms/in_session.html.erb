

<%= show_room_for(@user, @survey, @appointment, @pre_appt_survey)) %>

<%= render "/rooms/user_rooms/intro_session" %>

<script src="//static.opentok.com/webrtc/v2.2/js/opentok.min.js"></script>

<script type="text/javascript">


  window.onresize=function(){
    var layoutContainer=document.getElementById('layoutContainer');
    var window_height = $(window).height()-300;
    if ( window_height+"px" != $(layoutContainer).css("height") ) { 
      layoutContainer.style.height = window_height+"px";  
    };
  };  

	var apiKey =  "<%=ENV['API_KEY']%>";
	var sessionId = "<%= @room.sessionId %>";
	var token = "<%= @tok_token %>";

	var session;
  var startTime;
    // needs new home
  // function to get URL parameter by string parameter
  // on page /rooms/30/in_session?appointment=60 
  // getURLParameter("appointment")
  // would return "60"
  function getURLParameter(name) {
    return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(location.search)||[,""])[1].replace(/\+/g, '%20'))||null
  }
  var appointment_id = getURLParameter("appointment");      

  //	TB.addEventListener('exception', exceptionHandler);
	
	//Video chat event listeners
	//session.addEventListener('sessionConnected', sessionConnectedHandler);
	//session.addEventListener('streamCreated', streamCreatedHandler);
  var TokBox = {
    initialize: function(){
      
      TB.setLogLevel(TB.DEBUG);
      //session.connect(apiKey, token);

      // OT.checkSystemRequirements() function before you do any initialization.

      var session = TB.initSession(sessionId);
      // var session = TB.initSession(apiKey, sessionId);
      
      session.addEventListener('sessionConnected', sessionConnectedHandler);
      session.addEventListener('streamCreated', streamCreatedHandler);
      session.addEventListener('sessionDisconnected', sessionDisconnectedHandler);
      session.addEventListener('streamDestroyed', streamDestroyedHandler);
      session.addEventListener("signal:Message", receiveSignalHandler);
      session.addEventListener("signal:StartAlert", receiveStartAlertHandler);
      session.connect(apiKey, token);

      var publisher;
      function sessionConnectedHandler(event) {
        publisher = TB.initPublisher(apiKey, 'videobox');
        session.publish(publisher);
        // set video container size
        var layoutContainer = $("#layoutContainer");
        // get height of window and subtract 300 for navs
        var window_height = $(window).height()-300;
        layoutContainer.css("height", window_height+"px");
        // make publish video 100% size to be responsive
        var pubElement = document.getElementById(publisher.id);
        pubElement.style.width = "100%";
        pubElement.style.height = "100%";
        // set listeners for video acces pop ups
        publisher.addEventListener('accessAllowed', accessAllowedHandler);

        publisher.addEventListener('accessDenied', accessDeniedHandler);

        publisher.addEventListener('accessDialogOpened', accessDialogOpenedHandler);

        // publisher.addEventListener('streamDestroyed', streamDestroyedHandler);

        // publisher.addEventListener('accessDialogClosed', accessDialogClosedHandler);

        function accessAllowedHandler(e) {
          // for user allow
          $("#sessionIntroModal").modal("hide");
          $("#user-video").show();
          $("#user-video").removeClass("video-center").addClass("video-right");
          // create the tour instance

          // $("#client-video-placeholder").hide();
          // $(".welcome-rd-container-large").each(function(i30,e30){
          //   $(e30).addClass("welcome-rd-container-small").removeClass("welcome-rd-container-large");
          // });

          // for dietitian allow
          $("#welcome-rd-1").hide();
          $("#welcome-rd-2").hide();
          $("#welcome-rd-3").show();
          $("#dietitian-video").show();
          $("#dietitian-video").removeClass("video-left").addClass("video-right");
          // both 
          addStream(event);
        };

        function accessDeniedHandler(e){
          // if user has selected to deny the webcam after the session intro has been shown
          if ( ($("#sessionIntroModal").data('modal')) && ($("#sessionIntroModal").data('modal').isShown) ){
            // add denied has been selected warning
            $("#allow-camera-row").addClass("hidden");
            $("#allow-camera-denied-row").removeClass("hidden");
          // else if the user selected to deny the webcam a previous session
          } else {
            $("#sessionIntroModal").modal({
              backdrop: 'static',
              keyboard: false
            });
            $("#allow-camera-row").addClass("hidden");
            $("#allow-camera-denied-row").removeClass("hidden");
            // show modal with denied warning
          }
        };

        function accessDialogOpenedHandler(event) {
          $("#sessionIntroModal").modal({
            backdrop: 'static',
            keyboard: false
          });
          // when "allow video" prompt pops up
        };

        function accessDialogClosedHandler(event){
          // when "allow video" prompt closes
          alert("closed");
        };

        // Subscribe to streams that were in the session when we connected
        // subscribeToStreams(event.streams);

        function addStream(event){
          subscribeToStreams(event.streams);
        };

      };

      function streamCreatedHandler(event) {
        // Subscribe to any new streams that are created
        subscribeToStreams(event.streams);
      };
      function streamDestroyedHandler(event){
        // if the moderator stream is disconnected
        if (event.stream.connection.data === "Moderator") {
          // if the moderator disconnected on purpose then disconnect all sessions because the session is over
          // this is also the reason for if the dietitian accidentalyl closes window though
          // Need to differentiate between the two
          if (event.reason === "clientDisconnected") {
            session.disconnect();
            $.ajax({
              type: "GET",
              datatype: "script",
              data: {},
              url: "/appointments/"+appointment_id+"/end_appointment",
              success: function(response){
                $("#videobox2").append("<div class='col-xs-8 col-xs-offset-2'><h1><a href='/'>CLICK HERE TO EXIT APPOINTMENT</a></h1></div>");
              } 
            })
          // trigger placeholder text
          // if reason not clientDisconnected
          // should look into that more
          } else {
            $("#videobox2").append("<h3 class='text-center' id='video-placeholder'>Oops, be right back!</h3>")
          } 
        // if the user disconnects ir was by accident since we do not let them close the session right now
        }else {
          $("#videobox2").append("<h3 class='text-center' id='video-placeholder'>Oops, be right back!</h3>");
        } 
      };
      function sessionDisconnectedHandler(event) {
        // if stream destroyed is dietitian
        
        // else is patient
      };
      function sessionDestroy(event) {
         // event.streams;
         session.disconnect();
         // forceUnpublish(stream, completionHandler);
      };
      function receiveSignalHandler(event){
        // if chat container is closed when receiving a message then open it
        if ($("#chat-container").is(":hidden") ){
          $("#chat-container").show("slow");
          $("#phone-container").hide("slow");
          $("#phone-button-container").hide("slow");
        };
        var $chat_box = $('#chat-box');
        // if message was sent by self then send as orange if by other then green
        if (publisher.stream.connection.connectionId === event.from.id) {
          $chat_box.append("<h4><span class='font-light-orange'>You: </span>"+event.data+"</h4>");
        } else {
          $chat_box.append("<h4><span class='font-light-green'>Other: </span>"+event.data+"</h4>");
        };
        $chat_box.scrollTop($chat_box.prop("scrollHeight"));
      // Process the event.data property, if there is any data.
      };
      function receiveStartAlertHandler(event){
        // alert that a StartAlert was received
        alert("Client is connecting.");
        // if startTime hasn't been logged yet then log start time and start count down
        if (typeof startTime === 'undefined'){
          startTime = moment();
          var startTimeFormatted = moment().format('h:mm a');
          var endTime = startTime.add(1, "hours");
          var endTimeFormatted = endTime.format('h:mm a');
   
          $("#end-session-button").before("<p class='session-timer-text'>The session began at "+startTimeFormatted+" and is scheduled to end at "+endTimeFormatted+".  Time remaining: <span id='session-count-down'></span>");

          var diffTime = 3600000;
          var duration = moment.duration(diffTime, 'milliseconds');
          var interval = 1000;
          setInterval(function(){
            duration = moment.duration(duration - interval, 'milliseconds');
              $('#session-count-down').text(duration.hours() + ":" + duration.minutes() + ":" + duration.seconds())
          }, interval);
        }
      };
      function subscribeToStreams(streams) {
        for (var i = 0; i < streams.length; i++) {
          // Make sure we don't subscribe to ourself
          if (streams[i].connection.connectionId == session.connection.connectionId) {
            return;
          };
          if (streams[i].connection.data === "Moderator"){
            session.signal(
              {
                to: streams[i].connection,
                data: "Start Session Alert",
                type: "StartAlert"
              },
              function(error) {
                if (error) {
                  console.log("signal error ("
                             + error.code
                             + "): " + error.reason);
                } else {

                }
              }
            )
          };
          // // set video container size
          // var layoutContainer = $("#layoutContainer");
          // // get height of window and subtract 300 for navs
          // var window_height = $(window).height()-300;
          // layoutContainer.css("height", window_height+"px");
          var pubElement = document.getElementById(publisher.id);
          pubElement.style.width = "25%";
          pubElement.style.height = "25%";
          $(pubElement).addClass("small-video");
          // Create the div to put the subscriber element in to
          var div = document.createElement('div');
          div.setAttribute('id', 'stream' + streams[i].streamId);
          // remove placeholder if that was in place
          $("#video-placeholder").remove();
          // add div to videobox
          $("#videobox2").append(div);
          // set size of subscriber video box
          var subscriberProps = {
            width: "100%", 
            height: "100%"};
          // Subscribe to the stream
          session.subscribe(streams[i], div.id, subscriberProps);
          // session.addEventListener('streamDestroyed', streamDestroyedHandler);

        }
      };

      $("#end-session-button").on("click", function(e){
        e.preventDefault();
        var end_session_boolean = confirm("Are you sure you would like to end this session?");
        if (end_session_boolean === true) {
        // confirm to close session
          sessionDestroy();

          $.ajax({
            type: "GET",
            datatype: "script",
            data: {},
            url: "/appointments/"+appointment_id+"/end_appointment",
            success: function(response){
              $("#videobox2").append("<div class='col-xs-8 col-xs-offset-2'><h1><a href='/'>CLICK HERE TO EXIT APPOINTMENT</a></h1></div>");
            } 
          })
        }
      });

      $("#chat-container").on("click", "#send-message-button", function(e){
        e.preventDefault();
        var message = $("#user-message").val();
        session.signal(
          {
            data: message,
            type: "Message"
          },
          function(error) {
            if (error) {
              console.log("signal error ("
                         + error.code
                         + "): " + error.reason);
            } else {
              $("#user-message").val("");
            }
          }
        )
      })
    }
  };
  //   $("#check-camera").click(function(event){
  //     
  //     if (!stream.hasAudio) {
  // // You may want to adjust the user interface
  //     }
  //     if (!stream.hasVideo) {
  //       // You may want to adjust the user interface
  //     }
  //   })


</script>